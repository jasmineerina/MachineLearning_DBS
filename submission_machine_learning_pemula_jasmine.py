# -*- coding: utf-8 -*-
"""Submission Machine Learning Pemula_Jasmine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WL_Unm9JKjJ2GFP0wmlyehxSxYDCuhqm

# Submission Machine Learning untuk Pemula
- **Pemilik Submission :** Jasmine Erina Firdaus
(jasmineerina15@gmail.com)
- **Username Dicoding :** jsmnerina
- **Domisili :** Balikpapan,  Kalimantan Timur
- **Beasiswa :** DBS Foundation Coding Camp 2024
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
import os
import zipfile
!pip install split-folders
import splitfolders
import time
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

tf.keras.backend.clear_session()

!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

base_dir = '/content/rockpaperscissors/rps-cv-images'
os.listdir('/content/rockpaperscissors/rps-cv-images')

# melakukan splitfolder dataset menjadi train dan val perbandingan 60:40

splitfolders.ratio(
    '/content/rockpaperscissors/rps-cv-images',
    output='/content/rockpaperscissors/rps-cv-images',
    seed= 1337,
    ratio=(0.6, 0.4)
    )

train_dir=os.path.join(base_dir, 'train')
validation_dir=os.path.join(base_dir, 'val')

# cek train
os.listdir('/content/rockpaperscissors/rps-cv-images/train')

# cek val
os.listdir('/content/rockpaperscissors/rps-cv-images/val')

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    horizontal_flip=True,
    shear_range=0.2,
    fill_mode='nearest'
)

test_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    horizontal_flip=True,
    shear_range=0.2,
    fill_mode='nearest'
)

train_generator=train_datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)

validation_generator=test_datagen.flow_from_directory(
    validation_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)

print(train_generator.class_indices)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

# latih model dengan model.fit

start = time.time()

history = model.fit(
          train_generator,
          steps_per_epoch=35,
          epochs=20,
          validation_data=validation_generator,
          validation_steps=5
      )

stop = time.time()
print(f"Training time: {round((stop - start)/60)}minute")
history.history['accuracy'][-1]
history.history['val_accuracy'][-1]

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

uploaded = files.upload()

for fn in uploaded.keys():

  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))

  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])

  predictions = model.predict(images, batch_size=10)

  classes = np.argmax(predictions)
  print(fn)
  if classes==0:
    print("paper")
  elif classes== 1:
    print("rock")
  else:
    print("scissors")